{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessagesList.js","components/AddMessage.js","actions/index.js","containers/AddMessage.js","constants/ActionTypes.js","App.js","registerServiceWorker.js","reducers/messages.js","reducers/users.js","reducers/index.js","index.js"],"names":["Sidebar","_ref","users","react_default","a","createElement","id","className","map","user","key","name","connect","state","SidebarComponent","Message","message","author","MessagesList","messages","components_Message","Object","assign","MessagesListComponent","AddMessage","props","input","onKeyPress","e","dispatch","value","type","ref","node","nextMessageId","addMessage","AddMessageComponent","App","containers_Sidebar_Sidebar","containers_MessagesList_MessagesList","containers_AddMessage_AddMessage","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","arguments","length","undefined","action","concat","chat","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.12d2f75c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Sidebar = ({ users }) => (\r\n  <aside id=\"sidebar\" className=\"sidebar\">\r\n    <ul>\r\n      {users.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  </aside>\r\n)\r\n\r\nSidebar.propTypes = {\r\n  users: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  }).isRequired).isRequired\r\n}\r\n\r\nexport default Sidebar","import { connect } from 'react-redux'\r\nimport SidebarComponent from '../components/Sidebar'\r\n\r\nexport const Sidebar = connect(state => ({\r\n  users: state.users\r\n}), {})(SidebarComponent)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Message = ({ message, author }) => (\r\n  <p>\r\n    <i>{author}</i>: {message}\r\n  </p>\r\n)\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Message","\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Message from './Message'\r\n\r\nconst MessagesList = ({ messages }) => (\r\n  <section id=\"messages-list\">\r\n    <ul>\r\n      {messages.map(message => (\r\n        <Message\r\n          key={message.id}\r\n          {...message}\r\n        />\r\n    ))}\r\n    </ul>\r\n  </section>\r\n)\r\n\r\nMessagesList.propTypes = {\r\n  messages: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired\r\n  }).isRequired).isRequired\r\n}\r\n\r\nexport default MessagesList","import { connect } from 'react-redux';\r\nimport MessagesListComponent from '../components/MessagesList';\r\n\r\nexport const MessagesList = connect(state => ({\r\n  messages: state.messages\r\n}), {})(MessagesListComponent)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddMessage = (props) => {\r\n  let input\r\n\r\n  return (\r\n    <section id=\"new-message\">\r\n      <input\r\n        onKeyPress={(e) => {\r\n        if (e.key === 'Enter') {\r\n          props.dispatch(input.value, 'Me')\r\n          input.value = ''\r\n        }\r\n      }}\r\n        type=\"text\"\r\n        ref={(node) => {\r\n        input = node\r\n      }}\r\n      />\r\n    </section>\r\n  )\r\n}\r\n\r\nAddMessage.propTypes = {\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddMessage","import * as types from '../constants/ActionTypes';\r\n\r\nlet nextMessageId = 0;\r\nconst nextUserId = 0;\r\n\r\nexport const addMessage =(message,author)=>({\r\n\r\n    type: types.ADD_USER,\r\n    id :nextMessageId++,\r\n    message,\r\n    author\r\n})\r\n\r\nexport const addUser = name => ({\r\n    type:types.ADD_USER,\r\n    id: nextUserId++,\r\n    name\r\n})\r\n\r\nexport const messageReceived =(message,author) =>({\r\n    type :types.MESSAGE_RECEIVED,\r\n    id : nextMessageId,\r\n    message,\r\n    author\r\n})\r\n\r\nexport const populateUsersList =users =>({\r\n    type:types.USERS_LIST,\r\n    users\r\n})","import { connect } from 'react-redux';\r\nimport AddMessageComponent from '../components/AddMessage';\r\nimport { addMessage } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch: (message, author) => {\r\n    dispatch(addMessage(message, author))\r\n  }\r\n})\r\n\r\nexport const AddMessage = connect(() => ({}), mapDispatchToProps)(AddMessageComponent)","export const ADD_MESSAGE = 'ADD_MESSAGE'\r\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\r\nexport const ADD_USER = 'ADD_USER'\r\nexport const USERS_LIST = 'USERS_LIST'","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Sidebar } from \"./containers/Sidebar\";\r\nimport { MessagesList } from \"./containers/MessagesList\";\r\nimport { AddMessage } from \"./containers/AddMessage\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <Sidebar />\r\n        <section id=\"main\">\r\n          <MessagesList />\r\n          <AddMessage />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","const messages = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_MESSAGE\":\r\n    case \"MESSAGE_RECEIVED\":\r\n      return state.concat([\r\n        {\r\n          message: action.message,\r\n          author: action.author,\r\n          id: action.id\r\n        }\r\n      ]);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messages;\r\n","import * as types from '../constants/ActionTypes'\r\n\r\nconst users = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.USERS_LIST:\r\n      return action.users\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default users","import {combineReducers} from 'redux';\r\nimport messages from './messages';\r\nimport users from './users';\r\n\r\nconst chat = combineReducers({\r\n    messages,\r\n    users\r\n})\r\n\r\nexport default chat;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport chat from \"./reducers\";\n\nconst store = createStore(chat);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}